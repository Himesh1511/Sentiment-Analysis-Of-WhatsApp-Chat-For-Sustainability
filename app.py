from flask import Flask, render_template, request, redirect, url_for, jsonify
from werkzeug.utils import secure_filename
import os
from analysis import analyze_chat

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'txt'}

# Function to check if the file type is allowed
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # Check if the 'file' part is present in the request
        if 'file' not in request.files:
            return redirect(request.url)
        
        # Get the file from the request
        file = request.files['file']
        
        # Check if the user selected a file
        if file.filename == '':
            return redirect(request.url)
        
        # If the file is allowed, save and process it
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            
            # Ensure the uploads directory exists
            if not os.path.exists(app.config['UPLOAD_FOLDER']):
                os.makedirs(app.config['UPLOAD_FOLDER'])
            
            # Save the file to the specified directory
            file.save(file_path)
            
            # Call the analysis function to process the chat file and generate visualizations
            summary_text, wordcloud_image, emoji_wordcloud_image, topics = analyze_chat(file_path)
            
            # Generate response time and topics data
            response_time_data = {
                'average_time': request.args.get('response_time_avg'),
                'fastest_time': request.args.get('response_time_fast'),
                'slowest_time': request.args.get('response_time_slow')
            }

            # Return the paths of the generated files along with the data
            return redirect(url_for('result', 
                                    wordcloud_image=wordcloud_image, 
                                    emoji_wordcloud_image=emoji_wordcloud_image,
                                    response_time_avg=response_time_data['average_time'],
                                    response_time_fast=response_time_data['fastest_time'],
                                    response_time_slow=response_time_data['slowest_time'],
                                    topics=topics))

    # Render the upload form if it's a GET request
    return render_template('index.html')

@app.route('/result')
def result():
    summary_content = ""
    
    # Fetch the passed parameters
    wordcloud_image = request.args.get('wordcloud_image', None)
    emoji_wordcloud_image = request.args.get('emoji_wordcloud_image', None)
    
    # Fetch response times
    response_time_avg = request.args.get('response_time_avg', None)
    response_time_fast = request.args.get('response_time_fast', None)
    response_time_slow = request.args.get('response_time_slow', None)
    
    # Fetch topics
    topics = request.args.getlist('topics')

    # Try to read the summary file generated by analyze_chat
    try:
        with open('static/summary.txt', 'r') as f:
            summary_content = f.read()
    except FileNotFoundError:
        # If the summary file doesn't exist, show an appropriate message
        summary_content = "Summary file not found."
    
    # Render the result page with the summary content and new analysis data
    return render_template('result.html', 
                           summary=summary_content, 
                           wordcloud_image=wordcloud_image,
                           emoji_wordcloud_image=emoji_wordcloud_image,
                           response_time_avg=response_time_avg,
                           response_time_fast=response_time_fast,
                           response_time_slow=response_time_slow,
                           topics=topics)

if __name__ == '__main__':
    # Ensure the uploads directory exists
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    
    # Run the Flask app in debug mode
    app.run(debug=True)
